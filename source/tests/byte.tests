function _test_byte_printBinary()
{
	local -ir byteAsUnsignedInteger=$1
	local -r expectedBinary="$2"
	
	test_assertEquals "Incorrect binary" "$(byte_printBinary "$byteAsUnsignedInteger")" "$expectedBinary"
}

function _test_byte_isBitSet()
{
	local -ir byteAsUnsignedInteger=$1
	
	local -i bit
	for bit in "$@"
	do
		if byte_isBitSet $byteAsUnsignedInteger $bit; then
			return 0
		fi
		test_fail "Bit $bit not set in $byteAsUnsignedInteger"
	done
}

function _test_byte_isBitUnset()
{
	local -ir byteAsUnsignedInteger=$1
	
	local -i bit
	for bit in "$@"
	do
		if ! byte_isBitSet $byteAsUnsignedInteger $bit; then
			return 0
		fi
		test_fail "Bit $bit not set in $byteAsUnsignedInteger"
	done
}

function test_byte_printBinary()
{
	_test_byte_printBinary 0   '00000000'
	_test_byte_printBinary 1   '00000001'
	_test_byte_printBinary 2   '00000010'
	_test_byte_printBinary 127 '01111111'
	_test_byte_printBinary 128 '10000000'
	_test_byte_printBinary 255 '11111111'
}

function test_byte_isBitSet()
{
	_test_byte_isBitSet 1 0
	_test_byte_isBitSet 255 0 1 2 3 4 5 6 7
	_test_byte_isBitUnset 1 1 2 3 4 5 6 7
	_test_byte_isBitUnset 0 0 1 2 3 4 5 6 7
}

function test_byte_setBit()
{
}

source run-tests byte
