core_usesIn core functions
core_functions_register _bishbosh_backend_registration socat

# Homebrew, Debian
bishbosh_backend_socat_check()
{
	case "$bishbosh_tunnel" in
		
		none|tls)
			:
		;;
		
		*)
			return 1
		;;
		
	esac
	
	if core_compatibility_whichNoOutput socat; then
		bishbosh_backend_name=socat
		bishbosh_backend_path="$(core_compatibility_which socat)"
		return 0
	fi
}

bishbosh_backend_socat_port()
{
	if [ "$bishbosh_tunnel" = 'none' ]; then
		printf '%s' 1883
	elif [ "$bishbosh_tunnel" = 'tls' ]; then
		printf '%s' 8883
	else
		printf '%s' 'invalid-tunnel'
	fi
}

core_usesIn core variable variable/array
bishbosh_backend_socat_start()
{
	local options
	local options_initialised
	core_variable_array_initialise options

	# Forces error messages to stderr
	core_variable_array_append options -ls
	
	# Makes socat appear to be bish-bosh
	core_variable_array_append options -lp${_program_name}
	
	case $(core_init_verbosity) in
		
		0)
			:
		;;
		
		1)
			core_variable_array_append options -d
		;;
		
		2)
			core_variable_array_append options -d -d
		;;
		
		3)
			core_variable_array_append options -d -d -d
		;;
		
		4)
			core_variable_array_append options -d -d -d -d
		;;
	esac

	# Forces 4 or 6, because we can not always use 'TCP4/6'
	case "$bishbosh_transport" in
		
		inet4)
			core_variable_array_append options '-4'
		;;
		
		inet6)
			core_variable_array_append options '-6'
		;;
	esac
	
	core_variable_array_append options 'STDIO'
	
	case "$bishbosh_transport" in
		
		unix)
			core_variable_array_append options "UNIX-CONNECT:${bishbosh_server}"
			core_variable_array_passToFunctionAsArguments options "$bishbosh_backend_path" <"$bishbosh_connection_toServerFifo" >"$bishbosh_connection_fromServerFifo" &
		;;
		
		serial)
			core_variable_array_append options "${bishbosh_server},raw,echo=0"
			core_variable_array_passToFunctionAsArguments options "$bishbosh_backend_path" <"$bishbosh_connection_toServerFifo" >"$bishbosh_connection_fromServerFifo" &
		;;
		
		inet*)
			local addressKind
			case "$bishbosh_proxyKind" in
				
				SOCKS4|SOCKS4a)
					addressKind="${$bishbosh_proxyKind}:${bishbosh_proxyAddress}:${bishbosh_server}:${bishbosh_port}"
					if core_variable_isSet bishbosh_proxyPort; then
						addressKind="${addressKind},socksport=${bishbosh_proxyPort}"
					fi
	
					if core_variable_isSet bishbosh_proxyUsername; then
						addressKind="${addressKind},socksuser=${bishbosh_proxyUsername}"
					fi
					
					if core_variable_isSet bishbosh_proxyPassword; then
						core_message WARN "The backend socat does not support specifing the proxy password for 'SOCKS4' bishbosh_proxyKind."
					fi
				;;
				
				SOCKS5)
					core_exitError $core_commandLine_exitCode_CONFIG "The backend socat does not support the 'SOCKS5' bishbosh_proxyKind."
				;;
		
				HTTP)
					addressKind="PROXY:${bishbosh_proxyAddress}:${bishbosh_server}:${bishbosh_port}"
					if core_variable_isSet bishbosh_proxyPort; then
						addressKind="${addressKind},socksport=${bishbosh_proxyPort}"
					fi
					if core_variable_isSet bishbosh_proxyUsername; then
						if core_variable_isSet bishbosh_proxyPassword; then
							addressKind="${addressKind},proxyauth=${bishbosh_proxyUsername}:${bishbosh_proxyPassword}"
						else
							core_message WATN $core_commandLine_exitCode_CONFIG "The backend socat requires 'bishbosh_proxyUsername' and 'bishbosh_proxyPassword' for the 'HTTP' bishbosh_proxyKind."
						fi
					elif core_variable_isSet bishbosh_proxyPassword; then
						core_message WATN $core_commandLine_exitCode_CONFIG "The backend socat requires 'bishbosh_proxyUsername' and 'bishbosh_proxyPassword' for the 'HTTP' bishbosh_proxyKind."
					fi
				;;
				
				*)
					case "$bishbosh_transport" in
						
						inet)
							addressKind='TCP'
						;;
		
						inet4)
							addressKind='TCP4'
						;;
		
						inet6)
							addressKind='TCP6'
						;;
					esac
					
					addressKind="${addressKind}:${bishbosh_server}:${bishbosh_port}"
				;;
		
			esac
			
			local binding
			if core_variable_isSet bishbosh_sourceAddress; then
				binding=",bind=$bishbosh_sourceAddress"
				if core_variable_isSet bishbosh_sourcePort; then
					binding="${binding}:${bishbosh_sourcePort}"
				fi
			elif core_variable_isSet bishbosh_sourcePort; then
				binding=",sourceport=${bishbosh_sourcePort}"
			fi
			
			local connectTimeout
			if [ $bishbosh_connectTimeout -ne 0 ]; then
				connectTimeout=",connect-timeout=${bishbosh_connectTimeout}"
			else
				connectTimeout=''
			fi
			
			# keepidle, keepintvl, keepcnt, linger2, mss, mss-late, syncnt
			core_variable_array_append options "${addressKind}${binding}${connectTimeout},keepalive,linger=1,nodelay"
		;;
		
		*)
			core_exitError $core_commandLine_exitCode_SOFTWARE "Please validate the values for bishbosh_transport ('$bishbosh_transport')"
		;;
		
	esac
	
	core_variable_array_passToFunctionAsArguments options echo 1>&2
	core_variable_array_passToFunctionAsArguments options "$bishbosh_backend_path" <"$bishbosh_connection_toServerFifo" >"$bishbosh_connection_fromServerFifo" &
}
