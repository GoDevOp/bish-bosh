bishbosh_connection_write_byte()
{
	printf "\\$(printf '%o' $1)"
}

bishbosh_connection_write_remainingLength()
{
	if [ $1 -lt 128 ]; then
		bishbosh_connection_write_byte $1
	elif [ $1 -lt 16384 ]; then
		local length=$1
		bishbosh_connection_write_byte $(( length % 128 + 128 ))
		bishbosh_connection_write_byte $(( length / 128))
	elif [ $1 -lt 2097152 ]; then
		local length=$1
		bishbosh_connection_write_byte $(( (length & 127) + 128 ))
		bishbosh_connection_write_byte $(( (length >> 7 & 127) + 128 ))
		bishbosh_connection_write_byte $((  length >> 14 & 127 ))
	else
		local length=$1
		bishbosh_connection_write_byte $(( (length & 127) + 128 ))
		bishbosh_connection_write_byte $(( (length >> 7 & 127) + 128 ))
		bishbosh_connection_write_byte $(( (length >> 14 & 127) + 128 ))
		bishbosh_connection_write_byte $((  length >> 21 & 127 ))
	fi
}

bishbosh_connection_write_twoByteLength()
{
	local length=$1
	bishbosh_connection_write_byte $(( length >> 8 ))
	bishbosh_connection_write_byte $(( length & 255 ))
}

core_usesIn bishbosh/connection/write CONNACK CONNECT DISCONNECT PINGREQ PINGRESP PUBACK PUBCOMP PUBLISH PUBREC PUBREL SUBACK SUBSCRIBE UNSUBACK UNSUBSCRIBE

bishbosh_connection_write_fieldLengthCheck()
{
	local packetName="$1"
	local variableName="$2"
	
	if [ $(core_variable_length "$variableName") -gt 65535 ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "The argument 'bishbosh_connection_write_${packetName}_${variableName}' can not be longer than 65,535 bytes"
	fi
}

_bishbosh_connection_write_validateUtf8WithIconv_icon()
{
	iconv -c -s -f utf-8 -t utf-8 <<-EOF
		$value
	EOF
}

_bishbosh_connection_write_validateUtf8WithIconv()
{
	if core_compatibility_whichNoOutput iconv; then
		if _bishbosh_connection_write_validateUtf8WithIconv_icon; then
			core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' is not valid UTF-8"
		fi
	fi
}

core_dependency_requires '*' tr iconv
bishbosh_connection_write_validateUtf8()
{
	local argument="$1"
	local value="$2"
	
	_bishbosh_connection_write_validateUtf8WithIconv
	
	local strippedOfAsciiNul="$(tr -d '\000' "$value")"
	
	if [ ${#strippedOfAsciiNul} -ne ${#argument} ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' contains \u0000 (ASCII NUL)"
	fi
}

bishbosh_connection_write_validateTopicName()
{
	local argument="$1"
	local value="$2"

	if [ ${#argument} -eq 0 ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' is empty; this is not permitted for topic names"
	fi
	
	_bishbosh_connection_write_validateUtf8WithIconv
	
	local strippedOfInvalidCharacters="$(tr -d '#*\000' "$value")"
	
	if [ ${#strippedOfInvalidCharacters} -ne ${#argument} ]; then
		local strippedOfAsciiNul="$(tr -d '\000' "$value")"
	
		if [ ${#strippedOfAsciiNul} -ne ${#argument} ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' contains \u0000 (ASCII NUL)"
		fi
		core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' ('$value') contains a wildcard ('#' or '+')"
	fi
}

core_dependency_requires '*' sed
_bishbosh_connection_write_validateTopicFilter_sed()
{
	sed -e 's;/+/;XXX;g' -e 's;^+/;XX;g' -e 's;/+$;XX;g' -e 's;/#$;XX;g' -e 's;#;;g' -e 's;+;;g' <<-EOF
		$topicFilter
	EOF
}

bishbosh_connection_write_validateTopicFilter()
{
	local argument="$1"
	local index=$2
	local value=$3
	
	argument="$argument' at pair index '$index"
	
	if [ ${#topicFilter} -eq 0 ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' is empty; this is not permitted for topic filters"
	fi
	
	_bishbosh_connection_write_validateUtf8WithIconv
	
	local strippedTopicFilter="$(tr -d '\n\000' "$topicFilter")"
	if [ ${#strippedTopicFilter} -ne ${#topicFilter} ]; then

		local strippedOfAsciiNul="$(tr -d '\000' "$value")"
		if [ ${#strippedOfAsciiNul} -ne ${#argument} ]; then
			core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' contains \u0000 (ASCII NUL)"
		fi
		
		core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' has a topic filter containing \n (LF, Linefeed), which, although allowed in the MQTT 3.1.1 specification can not be supported in portable shell scripts or common tools (outside of those supplied by GNU)"
	fi
	
	local strippedOfWildcard="$(_bishbosh_connection_write_validateTopicFilter_sed)"
	
	if [ ${#strippedOfWildcard} -ne ${#topicFilter} ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' ('$value') contains invalid wildcards"
	fi
}

bishbosh_connection_write_packetIdentifierCheck()
{
	local argument="$1"
	packetIdentifier="$2"
	core_validate_isUnsignedInteger $core_commandLine_exitCode_CONFIG 'argument' "$argument" "$packetIdentifier"
	if [ $packetIdentifier -eq 0 ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' is a packet identifier and so can not be 0"
	fi
	if [ $packetIdentifier -gt 65535 ]; then
		core_exitError $core_commandLine_exitCode_CONFIG "The argument '$argument' is a packet identifier and so can not be greater than 65,535"
	fi
}
