core_usesIn bishbosh/connection write

_bishbosh_connection_write_PUBLISH_validateArguments()
{
	if core_variable_isSet bishbosh_connection_write_PUBLISH_dup; then
		if core_variable_isTrue bishbosh_connection_write_PUBLISH_dup; then
			controlPacketTypeAndFlags=$(( controlPacketTypeAndFlags + 1 << 3 ))
		fi
	fi
	
	if core_variable_isUnset bishbosh_connection_write_PUBLISH_qos; then
		packetIdentifier=-1
	else
		qos="$bishbosh_connection_write_PUBLISH_qos"
		case "$qos" in
			
			0)
				packetIdentifier=-1	
			;;
			
			1|2)
				if core_variable_isUnset bishbosh_connection_write_PUBLISH_packetIdentifier; then
					core_exitError $core_commandLine_exitCode_CONFIG "The argument 'bishbosh_connection_write_CONNECT_packetIdentifer' must be set when 'bishbosh_connection_write_CONNECT_qos' is '$qos'"
				fi
				bishbosh_connection_write_packetIdentifierCheck bishbosh_connection_write_PUBLISH_packetIdentifier "$bishbosh_connection_write_PUBLISH_packetIdentifer"
				
				controlPacketTypeAndFlags=$(( controlPacketTypeAndFlags + qos << 2 ))
				remainingLength=$(( remainingLength + 2 ))
			;;
			
			*)
				core_exitError $core_commandLine_exitCode_CONFIG "The argument 'bishbosh_connection_write_CONNECT_qos' can not be '$qos', but a value between 0 to 2 inclusive"
			;;
			
		esac
	fi

	if core_variable_isSet bishbosh_connection_write_PUBLISH_retain; then
		if core_variable_isTrue bishbosh_connection_write_PUBLISH_retain; then
			controlPacketTypeAndFlags=$(( controlPacketTypeAndFlags + 1 ))
		fi
	fi
	
	if core_variable_isUnset bishbosh_connection_write_PUBLISH_topicName; then
		core_exitError $core_commandLine_exitCode_CONFIG "The argument 'bishbosh_connection_write_PUBLISH_topicName' must be specified"
	fi
	topicName="$bishbosh_connection_write_PUBLISH_topicName"
	bishbosh_connection_write_fieldLengthCheck PUBLISH 0 topicName
	topicName_fieldLength=${#topicName}
	remainingLength=$(( remainingLength + 2 + topicName_fieldLength ))
	
	if core_variable_isUnset bishbosh_connection_write_PUBLISH_message; then
		message=''
	else
		message="$bishbosh_connection_write_PUBLISH_message"
		bishbosh_connection_write_fieldLengthCheck PUBLISH 0 message
	fi
	message_fieldLength=${#message}
	remainingLength=$(( remainingLength + 2 + message_fieldLength ))
}

bishbosh_connection_write_PUBLISH()
{
	local remainingLength=0
	
	# 3 << 4
	local controlPacketTypeAndFlags=48
	local packetIdentifier
	local qos
	local topicName
	local topicName_fieldLength
	local message
	local message_fieldLength
	_bishbosh_connection_write_PUBLISH_validateArguments
	
	core_TODO: "We don't check for wildcards, ASCII NULL, or empty topic names"
	core_TODO "We don't handle binary payloads containing ASCII NULL, and we really ought to also allow the use of files (with offsets, sizes, too, for firmware transmissions) and base64 encoded data"
	
	bishbosh_write_byte "$controlPacketTypeAndFlags"
	bishbosh_connection_write_remainingLength $remainingLength
	
	bishbosh_connection_write_twoByteLength $topicName_fieldLength
	printf '%s' "$topicName"
	
	if [ $packetIdentifier -ne -1 ]; then
		bishbosh_connection_write_twoByteLength $packetIdentifier
	fi
	
	printf '%s' "$message"
}
