core_usesIn bishbosh/connection read write
core_usesIn core children

bishbosh_connection_mkdir()
{
	local folderName="$1"
	local folderPath="$bishbosh_temporaryFolderPath"/"$bishbosh_connection_id"/"$folderName"
	mkdir -m 0700 -p "$folderPath"
	printf '%s' "$folderPath"
}

bishbosh_connection_mkfifo()
{
	local fifoName="$1"
	local fifoPath="$bishbosh_connection_fifoFolder"/"$fifoName"
	mkfifo -m 0600 "$fifoPath"
	printf '%s' "$fifoPath"
}

core_dependency_requires '*' mkfifo
core_dependency_oneOf '*' hexdump od
bishbosh_connection_makeClientConnection()
{
	# bishbosh_connection_id can't be local, otherwise not found in the signal handler...
	if core_variable_isUnset bishbosh_connection_nextId; then
		bishbosh_connection_id=0
		bishbosh_connection_nextId=0
	else
		bishbosh_connection_id=$bishbosh_connection_nextId
		bishbosh_connection_nextId=$((bishbosh_connection_nextId + 1))
	fi
	
	bishbosh_connection_write_CONNECT_cleanSession=1
	#bishbosh_connection_write_CONNECT_willTopic='/some/topic'
	#bishbosh_connection_write_CONNECT_willMessage='goodbye'
	#bishbosh_connection_write_CONNECT_willQos=0
	#bishbosh_connection_write_CONNECT_willRetain=0
	bishbosh_connection_write_CONNECT_keepAlive=0
	bishbosh_connection_write_CONNECT_clientId=clientid
	#bishbosh_connection_write_CONNECT_username=user
	#bishbosh_connection_write_CONNECT_password=password
	
	bishbosh_connection_fifoFolder="$(bishbosh_connection_mkdir fifo)"
	bishbosh_connection_toServerFifo="$(bishbosh_connection_mkfifo to-server)"
	bishbosh_connection_fromServerFifo="$(bishbosh_connection_mkfifo from-server)"
	bishbosh_connection_fromHexConversionFifo="$(bishbosh_connection_mkfifo from-hex-conversion)"
	
	bishbosh_connection_clientsPathForClientId="$bishbosh_clientsPath"/"$bishbosh_connection_write_CONNECT_clientId"
	mkdir -m 0755 -p "$bishbosh_connection_clientsPathForClientId"
	
	core_message INFO "Initiating connection '$bishbosh_connection_id' to server '$bishbosh_server' with temporary path '$bishbosh_connection_temporaryFolder/$bishbosh_connection_id'"
		
	# (Goes into background internally)
	bishbosh_client_plaintext_${bishbosh_client_plaintext}_start
	bishbosh_connection_clientPid=$!
	core_children_killOnExit $bishbosh_connection_clientPid
	
	bishbosh_connection_read_initialise 'no'
	bishbosh_connection_write_currentLockFolderPath=''
	bishbosh_connection_continue=true
	
	{
		bishbosh_connection_write_CONNECT
		core_trap_addOnCleanUp _bishbosh_connection_write_removeCurrentLockFolder
		
		local controlPacketByte
		local firstRemainingLengthByte
		$bishbosh_connection_read_loop
		
		bishbosh_connection_write_DISCONNECT
				
	} >"$bishbosh_connection_toServerFifo"
}

bishbosh_connection_body()
{
	bishbosh_connection_write_messages
	
	# Not needed if (a) not sent any subscribes [SUBACKS] / active subscriptions are known and (b) not expecting any PUBACKS and (c) not reading messages
	# Ideally, though, we want to time-out here. That's a little tricky unless using bash with its timeout option
	# it may be possible using signals, though: http://unix.ittoolbox.com/groups/technical-functional/shellscript-l/timeout-in-ksh-517595
	bishbosh_connection_read_firstTwoBytesOfControlPacket
	bishbosh_connection_read_handleControlPacket
	
	bishbosh_connection_continue=false
}

bishbosh_connection_write_messages()
{
	pushd "$bishbosh_connection_clientsPathForClientId"
		set +f
			local messageToTransmitMetaDataFilePath
			for messageToTransmitMetaDataFilePath in *.message
			do
				set -f
				if ! core_path_isReadableNonEmptyFilePath "$messageToTransmitMetaDataFilePath"; then
					if [ "$messageToTransmitMetaDataFilePath" = '*.message' ]; then
						continue
					fi
					core_message WARN "$messageToTransmitMetaDataFilePath" 
					continue
				fi
			
				bishbosh_connection_write_PUBLISH_resetArguments
				bishbosh_connection_write_currentLockFolderPath="$messageToTransmitMetaDataFilePath".lock
				# Atomic, according to http://wiki.bash-hackers.org/howto/mutex
				while ! mkdir "$bishbosh_connection_write_currentLockFolderPath" 2>/dev/null
				do
					sleep 0.01
				done
			
				source ./"$messageToTransmitMetaDataFilePath"
				bishbosh_connection_write_PUBLISH
				rm -f "$messageToTransmitMetaDataFilePath"
				rmdir "$bishbosh_connection_write_currentLockFolderPath"
				bishbosh_connection_write_currentLockFolderPath=''
			done
		set -f
	popd
}

_bishbosh_connection_write_removeCurrentLockFolder()
{
	rmdir "$bishbosh_connection_write_currentLockFolderPath" 1>/dev/null 2>/dev/null || true
}

bishbosh_connection_read_expectingCONNACK()
{
	bishbosh_connection_read_firstTwoBytesOfControlPacket
	if [ $controlPacketByte -ne 32 ]; then
		bishbosh_connection_read_controlpacket_invalid
	fi
	bishbosh_connection_read_controlpacket_CONNACK
}

bishbosh_connection_read_firstTwoBytesOfControlPacket()
{
	$bishbosh_connection_read_byte_blocking controlPacketByte
	$bishbosh_connection_read_byte_blocking firstRemainingLengthByte
}
