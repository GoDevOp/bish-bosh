core_usesIn bishbosh/connection ping

core_dependency_requires '*' grep
core_dependency_oneOf '*' stdbuf od hexdump dd unbuffer
bishbosh_connection_background_hexConversion()
{
	# Not a loop; but setting varargs ($@) isn't something we can return from a method call
	# Of course, in bash, once could use an array
	while true
	do
		local unbufferingTool
		for unbufferingTool in gstdbuf stdbuf
		do
			if ! core_compatibility_whichNoOutput "$unbufferingTool"; then
				continue
			fi
		
			# hexdump on Mac OS X doesn't seem to be compatible with stdbuf (probably because it uses a different libc)
		
			local odTool
			for odTool in god od
			do
				if ! core_compatibility_whichNoOutput "$odTool"; then
					continue
				fi
				if ! "$odTool" --version 2>&1 | grep -q '^od (GNU coreutils) '; then
					continue
				fi
				core_message INFO "Using stdbuf ($unbufferingTool) with od ($odTool)"
				set -- "$unbufferingTool" -i 0 -o 0 -e 0 "$odTool" -A n -t u1 -w1 -v
				break 3
			done
		done
		
		
		if core_compatibility_whichNoOutput hexdump; then
			set -- _bishbosh_connection_background_hexConversion_dd hexdump -e '"%u\n"'
			break
		fi
		
		if core_compatibility_whichNoOutput od; then
			set -- _bishbosh_connection_background_hexConversion_dd od -A n -t u1
			break
		fi
		
		# This DOES NOT SEEM TO WORK
		if core_compatibility_whichNoOutput unbuffer; then
		
			if core_compatibility_whichNoOutput hexdump; then

				core_message INFO "Using unbuffer with hexdump"
				set -- unbuffer hexdump -v -e '"%u\n"'
				break
			
			else
		
				local odTool
				for odTool in god od
				do
					if ! core_compatibility_whichNoOutput "$odTool"; then
						continue
					fi
					if ! "$odTool" --version 2>&1 | grep -q '^od (GNU coreutils) '; then
						continue
					fi
					core_message INFO "Using unbuffer with od ($odTool)"
					# Only works with GNU od, because of the -w1 argument
					set -- unbuffer "$odTool" -A n -t u1 -w1 -v
					break 2
				done
			fi
		fi
		
		core_exitError $core_commandLine_exitCode_OSFILE "Could not find a means of doing Hex Conversion"
	done
	
	"$@" <"$bishbosh_connection_fromServerFifo" >"$bishbosh_connection_fromHexConversionFifo" &
}

_bishbosh_connection_background_hexConversion_dd()
{
	{
		while true
		do
			dd bs=1 count=1 2>/dev/null | "$@"
		done
	}
}

_bishbosh_connection_background_processLoop_trapHandlerTERM()
{
	bishbosh_connection_continue=false
	core_message INFO 'processLoop terminating because of signal'
}

bishbosh_connection_background_processLoop()
{
	{
		trap '' TERM INT HUP ABRT QUIT
		bishbosh_connection_continue=true
		trap _bishbosh_connection_background_processLoop_trapHandlerTERM TERM
		
		bishbosh_connection_read_byte_nonBlockingInitialise
		
		if ! $bishbosh_connection_continue; then
			return
		fi
		bishbosh_connection_write_CONNECT
		
		local controlPacketByte
		local remainingLength
		
		# Specialised CONNACK handling
		# - No need to check for pings
		# - Do not respond to any other packets bar CONNACK
		while $bishbosh_connection_continue
		do
			# Will return empty if interrupted (SIGINT) or non-blocking
			controlPacketByte=''
			bishbosh_connection_read_byte_nonBlocking controlPacketByte
			if [ -z "$controlPacketByte" ]; then
				continue
			fi
			break
		done
		if ! $bishbosh_connection_continue; then
			return
		fi
		if [ $controlPacketByte -ne 32 ]; then
			bishbosh_connection_read_controlpacket_invalid
		fi
		bishbosh_connection_read_remainingLength CONNACK
		bishbosh_connection_read_controlpacket_CONNACK
		
		# Main read loop
		while $bishbosh_connection_continue
		do
			bishbosh_connection_ping_sendPingIfRequired
			
			# Will return empty if interrupted (SIGINT) or non-blocking
			controlPacketByte=''
			bishbosh_connection_read_byte_nonBlocking controlPacketByte
			if [ -z "$controlPacketByte" ]; then
				bishbosh_connection_ping_checkForResponseTimeout
				bishbosh_connection_handler_noControlPacketsRead
				continue
			fi
			
			bishbosh_connection_read_remainingLength "$controlPacketByte"
			bishbosh_connection_read_controlpacket_handle
			
			bishbosh_connection_ping_checkForResponseTimeout
		done
		
		bishbosh_connection_write_DISCONNECT
		
	} >"$bishbosh_connection_toServerFifo" 5<"$bishbosh_connection_fromHexConversionFifo" &
}

# Only needed for dash, pdksh
core_dependency_requires '*' sleep kill
core_usesIn bishbosh/connection foreground
bishbosh_connection_background_processingLoopReadInterrupter()
{
	if [ $bishbosh_connection_supportsNonBlockingRead -eq 0 ]; then
		{
			while true
			do
				sleep $bishbosh_readLatency_inFractionalSeconds
				kill -HUP $bishbosh_connection_processLoopPid 2>/dev/null || exit 0
			done
		} 1>/dev/null </dev/null &
		bishbosh_connection_foreground_recordBackgroundJob bishbosh_connection_processingLoopReadInterrupterPid
	fi
}

bishbosh_connection_background_client()
{
	core_message INFO "Initiating connection '$bishbosh_connection_id' to server '$bishbosh_server' with temporary path '$bishbosh_temporaryFolderPath/$bishbosh_connection_id'"
	bishbosh_client_plaintext_${bishbosh_client_plaintext}_start
}
