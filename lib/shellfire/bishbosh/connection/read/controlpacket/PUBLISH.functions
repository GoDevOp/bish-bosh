bishbosh_connection_read_PUBLISH_0()
{	
	local retain=0
	local QoS=0
	local dup=0
	_bishbosh_connection_read_PUBLISH
}

bishbosh_connection_read_PUBLISH_1()
{
	local retain=1
	local QoS=0
	local dup=0
	_bishbosh_connection_read_PUBLISH
}

bishbosh_connection_read_PUBLISH_2()
{
	local retain=0
	local QoS=1
	local dup=0
	_bishbosh_connection_read_PUBLISH
}

bishbosh_connection_read_PUBLISH_3()
{
	local retain=1
	local QoS=1
	local dup=0
	_bishbosh_connection_read_PUBLISH
}

bishbosh_connection_read_PUBLISH_4()
{
	local retain=0
	local QoS=2
	local dup=0
	_bishbosh_connection_read_PUBLISH
}

bishbosh_connection_read_PUBLISH_5()
{
	local retain=1
	local QoS=2
	local dup=0
	_bishbosh_connection_read_PUBLISH
}

bishbosh_connection_read_PUBLISH_10()
{
	local retain=0
	local QoS=1
	local dup=1
	_bishbosh_connection_read_PUBLISH
}

bishbosh_connection_read_PUBLISH_11()
{
	local retain=1
	local QoS=1
	local dup=1
	_bishbosh_connection_read_PUBLISH
}

bishbosh_connection_read_PUBLISH_12()
{
	local retain=0
	local QoS=2
	local dup=1
	_bishbosh_connection_read_PUBLISH
}

bishbosh_connection_read_PUBLISH_13()
{
	local retain=1
	local QoS=2
	local dup=1
	_bishbosh_connection_read_PUBLISH
}

_bishbosh_connection_read_PUBLISH()
{
	local length
	bishbosh_connection_read_length
	local topicLength=$length
	
	local topicName
	local remainingTopicLength=$messageLength
	local byte
	while [ $remainingTopicLength -ne 0 ]
	do
		bishbosh_connection_read_byte_blocking byte
		topicName="${topicName}$(bishbosh_connection_write_byte $byte)"
		remainingTopicLength=$((remainingTopicLength-1))
	done
	
	local packetIdentifier
	bishbosh_connection_read_packetIdentifier
	
	local messageLength=$((remainingLength-2-topicLength-2))
	
	# Not good enough for sorting
	local messageFileBasePath="$bishbosh_connection_sessionReceivePath"/$QoS/$packetIdentifier
	local messageFilePath="$messageFileBasePath".message

	local remainingMessageLength=$messageLength
	
	local isADuplicate
	local byte
	
	if [ -f "$messageFileBasePath".complete ]; then
		isADuplicate=1
	
		while [ $remainingMessageLength -ne 0 ]
		do
			bishbosh_connection_read_byte_blocking byte
			remainingMessageLength=$((remainingMessageLength-1))
		done

		bishbosh_connection_handler_PUBLISH_again
		
	else
		isADuplicate=0
	
		while [ $remainingMessageLength -ne 0 ]
		do
			bishbosh_connection_read_byte_blocking byte
			bishbosh_connection_write_byte $byte
			remainingMessageLength=$((remainingMessageLength-1))
		done >"$messageFilePath"
		
		printf '' >"$messageFileBasePath".complete
		
		bishbosh_connection_handler_PUBLISH
	fi
	
	case $QoS in
		
		0)
			set +f
			rm -rf "$messageFileBasePath".* 2>/dev/null
			set -f
		;;
		
		1)
			bishbosh_connection_packetIdentifier_forWriting=$packetIdentifier
			bishbosh_connection_write_PUBACK

			set +f
			rm -rf "$messageFileBasePath".* 2>/dev/null
			set -f
		;;
		
		2)
			bishbosh_connection_packetIdentifier_forWriting=$packetIdentifier
			bishbosh_connection_write_PUBREC
			printf '' >"$messageFileBasePath".sent-pubrec
		;;
		
	esac
}
