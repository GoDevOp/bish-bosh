core_usesIn bishbosh/connection/read controlpacket
core_usesIn bishbosh/connection/read/loop gnuCoreutilsPipe forkHexdump forkOd

core_dependency_requires '*' grep
bishbosh_connection_read_initialise()
{
	local isServer="$1"
	
	bishbosh_connection_read_controlpacket_initialise "$isServer"
	
	# Homebrew
	if core_compatibility_whichNoOutput gstdbuf; then
		if core_compatibility_whichNoOutput god; then
			bishbosh_connection_read_loop=bishbosh_connection_read_loop_gnuCoreutilsPipe_Homebrew
			bishbosh_connection_read_byte_blocking=bishbosh_connection_read_byte_gnuCoreutilsPipe_blocking
			bishbosh_connection_read_byte_nonBlocking=bishbosh_connection_read_byte_gnuCoreutilsPipe_nonBlocking
			return 0
		fi
	fi
	
	if core_compatibility_whichNoOutput stdbuf; then
		if core_compatibility_whichNoOutput od; then
			if od --version 2>&1 | grep -q '^od (GNU coreutils) '; then
				bishbosh_connection_read_loop=bishbosh_connection_read_loop_gnuCoreutilsPipe_regular
				bishbosh_connection_read_byte_blocking=bishbosh_connection_read_byte_gnuCoreutilsPipe_blocking
				bishbosh_connection_read_byte_nonBlocking=bishbosh_connection_read_byte_gnuCoreutilsPipe_nonBlocking
				return 0
			fi
		fi
	fi
	
	if core_compatibility_whichNoOutput hexdump; then
		bishbosh_connection_read_loop=bishbosh_connection_read_loop_gnuCoreutilsPipe_forkHexdump
		bishbosh_connection_read_byte_blocking=_bishbosh_connection_read_byte_forkHexdump
		bishbosh_connection_read_byte_nonBlocking=_bishbosh_connection_read_byte_forkHexdump_nonBlocking
		return 0
	fi
	
	if core_compatibility_whichNoOutput od; then
		bishbosh_connection_read_loop=bishbosh_connection_read_loop_gnuCoreutilsPipe_forkOd
		bishbosh_connection_read_byte_blocking=_bishbosh_connection_read_byte_forkOd
		bishbosh_connection_read_byte_nonBlocking=_bishbosh_connection_read_byte_forkOd_nonBlocking
		return 0
	fi
	
	core_exitError "Can not find either hexdump or od on the path"
}

bishbosh_connection_read_expectingCONNACK()
{
	bishbosh_connection_read_firstTwoBytesOfControlPacket
	if [ $controlPacketByte -ne 32 ]; then
		bishbosh_connection_read_controlpacket_invalid
	fi
	bishbosh_connection_read_controlpacket_CONNACK
}

bishbosh_connection_read_firstTwoBytesOfControlPacket()
{
	$bishbosh_connection_read_byte_blocking controlPacketByte
	$bishbosh_connection_read_byte_blocking firstRemainingLengthByte
}

bishbosh_connection_read_protocolError()
{
	local controlPacket="$1"
	local message="$2"
	core_message WARN "Connection:$bishbosh_connection_id:read:$controlPacket:$message"
	return $core_commandLine_exitCode_PROTOCOL
}

bishbosh_connection_read_protocolErrorIfRemainingLengthNot()
{
	local controlPacket="$1"
	local expectedLength=$2
	if [ $firstRemainingLengthByte -ne $expectedLength ]; then
		bishbosh_connection_read_protocolError "$controlPacket" "Remaining length '$firstRemainingLengthByte' should be $expectedLength"
	fi
}

bishbosh_connection_read_protocolErrorIfRemainingLengthNotZero()
{
	bishbosh_connection_read_protocolErrorIfRemainingLengthNot "$1" 0
}
