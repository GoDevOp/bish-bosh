core_usesIn bishbosh/connection read write handler background foreground
core_usesIn core children

core_dependency_requires '*' mkdir
bishbosh_connection_mkdir()
{
	local parentPath="$1"
	local folderName="$2"

	local folderPath="$parentPath"/"$folderName"
	mkdir -m 0700 -p "$folderPath"
	printf '%s' "$folderPath"
}

core_dependency_requires '*' mkfifo
bishbosh_connection_mkfifo()
{
	local fifoName="$1"
	local fifoPath="$bishbosh_connection_fifoFolder"/"$fifoName"
	mkfifo -m 0600 "$fifoPath"
	printf '%s' "$fifoPath"
}

bishbosh_connection_sourceScriptlets()
{
	local path="$1"
	mkdir -m 0755 -p "$path" 2>/dev/null
	
	local scriptletFilePath="$path"/rc
	if core_path_isReadableNonEmptyFilePath "$scriptletFilePath"; then
		. "$scriptletFilePath"
	fi
	
	local scriptletsFolderPath="$path"/rc.d
	if [ ! -d "$scriptletsFolderPath" ]; then
		return 0
	fi
	pushd "$scriptletsFolderPath"
		set +f
			for scriptletFilePath in *.scriptlet
			do
				set -f
				if ! core_path_isReadableNonEmptyFilePath "$scriptletFilePath"; then
					if [ "$scriptletFilePath" = '*.scriptlet' ]; then
						continue
					fi
					core_exitError "The client-id scriptlet file '$scriptletFilePath' is not a readable, non-empty file"
				fi
				
				. ./"$scriptletFilePath"
			done
		set -f
	popd
}

_bishbosh_connection_defaultFolderPath()
{
	local variableName="$1"
	local parentPath="$2"
	local folderName="$3"
	if core_variable_isUnset "$variableName"; then
		core_variable_setVariable "$variableName" "$(bishbosh_connection_mkdir "$parentPath" "$folderName")"
	fi
}

bishbosh_connection_chooseConnectionSessionPathAndCleanUpOldSessionIfRequired()
{
	# Choose a temporary location for clean session = 1 clients
	local chosenParentPath
	local tryToCleanUpSession
	if core_variable_isUnset bishbosh_connection_sessionPath; then
		if core_variable_isUnset bishbosh_connection_write_CONNECT_cleanSession; then
			chosenParentPath="$bishbosh_sessionPath"
			tryToCleanUpSession=0
		else
			core_validate_isBoolean $core_commandLine_exitCode_CONFIG 'argument' bishbosh_connection_write_CONNECT_cleanSession "$bishbosh_connection_write_CONNECT_cleanSession"
			if core_variable_isTrue "$bishbosh_connection_write_CONNECT_cleanSession"; then
				chosenParentPath="$bishbosh_temporaryFolderPath"
				tryToCleanUpSession=1
			else
				chosenParentPath="$bishbosh_sessionPath"
				tryToCleanUpSession=0
			fi
		fi
	fi
	
	local relativeSessionPath=servers/"$bishbosh_server"/ports/"$bishbosh_port"/client-ids/"$bishbosh_clientId"
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionPath "$chosenParentPath"/"$relativeSessionPath" session
	
	if [ $tryToCleanUpSession ]; then
		rm -rf "$bishbosh_sessionPath"/"$relativeSessionPath" 2>/dev/null || core_message WARN "Could not clean up session state at '$bishbosh_sessionPath/$relativeSessionPath'"
	fi
}

bishbosh_connection_defaultAndCreateSessionSubFolderPaths()
{
	# subscriptions: Can be overridden, but not listed in help or README.md
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionSubscriptionsPath "$bishbosh_connection_sessionPath" subscriptions
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionSubscriptionsSubscribingPath "$bishbosh_connection_sessionSubscriptionsPath" subscribing
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionSubscriptionsActivePath "$bishbosh_connection_sessionSubscriptionsPath" active
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionSubscriptionsUnsubscribingPath "$bishbosh_connection_sessionSubscriptionsPath" unsubscribing
	
	# publications: Can be overridden, but not listed in help or README.md
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionPublicationsPath "$bishbosh_connection_sessionPath" publications
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionPublicationsQos2PendingReceivePath "$bishbosh_connection_sessionPublicationsPath" qos2-receive
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionPublicationsQos1PendingSendPath "$bishbosh_connection_sessionPublicationsPath" qos1-sent-publish
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionPublicationsQos2PendingSendPath "$bishbosh_connection_sessionPublicationsPath" qos2-sent-publish
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionPublicationsQos2PendingCompPath "$bishbosh_connection_sessionPublicationsPath" qos2-sent-pubrel
	
	# messages: Can be overridden, but not listed in help or README.md
	_bishbosh_connection_defaultFolderPath bishbosh_connection_sessionReceivedMessagesPath "$bishbosh_connection_sessionPath" received-messages
}

bishbosh_connection_defaultEssentialState()
{	
	# Should have come from session
	if core_variable_isUnset bishbosh_connection_nextPacketIdentifier; then
		bishbosh_connection_nextPacketIdentifier=0
	fi
	if core_variable_isUnset bishbosh_connection_nextReceivedMessageNumber; then
		bishbosh_connection_nextReceivedMessageNumber=0
	fi
}

bishbosh_connection_obtainConnectionId()
{
	if core_variable_isUnset bishbosh_connection_nextId; then
		bishbosh_connection_id=0
		bishbosh_connection_nextId=0
	else
		bishbosh_connection_id=$bishbosh_connection_nextId
		bishbosh_connection_nextId=$((bishbosh_connection_nextId + 1))
	fi
}

bishbosh_connection_obtainNextSubscriptionIndex()
{
	# Or find . -type f -print | awk -v FS='/' '{print $2}' | sort -n  to get a numerically sorted list. Yuck.
	bishbosh_connection_nextSubscriptionIndex=0
	
	pushd "$bishbosh_connection_sessionSubscriptionsActivePath"
	
		local currentSubscriptionIndex
		local parsedCurrentSubscriptionIndex
		set +f
		for currentSubscriptionIndex in *
		do
			set -f
			if [ ! -e "$currentSubscriptionIndex" ]; then
				# ie '*'
				continue
			fi
			
			# This rather odd logic ensures that a leading-zero padded unsigned decimal integer number is not interpreted as octal
			# Leading-zero padding is used to ensure the shell's glob-expansion sorts in ascending numerical order subscription files
			parsedCurrentSubscriptionIndex=$((1${currentSubscriptionIndex}-1000000000))
			if [ $parsedCurrentSubscriptionIndex -gt $bishbosh_connection_nextSubscriptionIndex ]; then
				bishbosh_connection_nextSubscriptionIndex=$parsedCurrentSubscriptionIndex
			fi
		done
		set -f
	
	popd
}

core_dependency_requires '*' rmdir mkdir
bishbosh_connection_obtainLockForClientId()
{
	# This odd-looking design minimises the time between obtaining the lock (mkdir) and enabling clean-up on exit
	# (there's a slight chance that receiving SIGTERM will leave the lock behind if received between mkdir and assignment of the variable bishbosh_connection_clientIdLockFolderPath)
	bishbosh_connection_clientIdLockFolderPath=''
	_bishbosh_connection_write_removeClientIdLockFolder()
	{
		if [ -n "$bishbosh_connection_clientIdLockFolderPath" ]; then
			rmdir "$bishbosh_connection_clientIdLockFolderPath" 1>/dev/null 2>/dev/null || true
		fi
	}
	core_trap_addOnCleanUp _bishbosh_connection_write_removeClientIdLockFolder
	local lockPath="$bishbosh_lockPath"/servers/"$bishbosh_server"/ports/"$bishbosh_port"/client-ids/"$bishbosh_clientId"/lock
	if mkdir -m 0755 -p "$lockPath"; then
		bishbosh_connection_clientIdLockFolderPath="$lockPath"
	else
		core_exitError "Another process has lock'd Client Id '$bishbosh_clientId' at path '$lockPath'"
	fi
}

bishbosh_connection_createFifos()
{
	bishbosh_connection_fifoFolder="$(bishbosh_connection_mkdir "$bishbosh_temporaryFolderPath"/"$bishbosh_connection_id" fifo)"
	bishbosh_connection_toServerFifo="$(bishbosh_connection_mkfifo to-server)"
	bishbosh_connection_fromServerFifo="$(bishbosh_connection_mkfifo from-server)"
	bishbosh_connection_fromHexConversionFifo="$(bishbosh_connection_mkfifo from-hex-conversion)"
}

bishbosh_connection_makeClientConnection()
{
	if core_variable_isUnset bishbosh_connection_clientServersPath; then
		bishbosh_connection_clientServersPath="$bishbosh_clientPath"/servers/"$bishbosh_server"
		bishbosh_connection_sourceScriptlets "$bishbosh_connection_clientServersPath"
	fi
	
	if core_variable_isUnset bishbosh_connection_clientServersPortsPath; then
		bishbosh_connection_clientServersPortsPath="$bishbosh_connection_clientServersPath"/ports/"$bishbosh_port"
		bishbosh_connection_sourceScriptlets "$bishbosh_connection_clientServersPortsPath"
	fi
	
	if core_variable_isUnset bishbosh_connection_clientServersPortsClientIdsPath; then
		bishbosh_connection_clientServersPortsClientIdsPath="$bishbosh_connection_clientServersPortsPath"/client-ids/"$bishbosh_clientId"
		bishbosh_connection_sourceScriptlets "$bishbosh_connection_clientServersPortsClientIdsPath"
	fi
	
	bishbosh_connection_obtainLockForClientId
	
	bishbosh_connection_chooseConnectionSessionPathAndCleanUpOldSessionIfRequired
	bishbosh_connection_defaultAndCreateSessionSubFolderPaths
	bishbosh_connection_defaultEssentialState
	
	bishbosh_connection_obtainConnectionId
	bishbosh_connection_obtainNextSubscriptionIndex
	bishbosh_connection_createFifos
	
	bishbosh_connection_read_initialise 'no'
	
	# http://mywiki.wooledge.org/SignalTrap
	# http://www.cons.org/cracauer/sigint.html
	# Assumes we are in a blocking read
	#trap '' INT TERM
	#if [ "$core_init_preferredShell" = 'bash' ]; then
	#	trap 'bishbosh_connection_continue=false; return 0' INT TERM
	#else
		# tested on dash
	#	trap 'bishbosh_connection_continue=false' INT TERM
	#fi
	
	# We can not open for writing using a file descriptor or redirection operator (>) a FIFO unless someone is already reading from it; we will be blocked
	# We can not open for reading using a file descriptor or redirection operator (<) a FIFO unless someone is already writing to it; we will be blocked
	
	# Background <"$bishbosh_connection_fromServerFifo" >"$bishbosh_connection_fromHexConversionFifo"
	bishbosh_connection_background_hexConversion
	local hexConversionPid=$!
	core_children_killOnExit $hexConversionPid
	
	# Background >"$bishbosh_connection_toServerFifo" <"$bishbosh_connection_fromHexConversionFifo"
	bishbosh_connection_background_processLoop
	local processLoopPid=$!
	core_children_killOnExit $processLoopPid
	
	# Background <"$bishbosh_connection_toServerFifo" >"$bishbosh_connection_fromServerFifo"
	bishbosh_connection_background_client
	local clientPid=$!
	core_children_killOnExit $clientPid
	
	# Foreground process to monitor child processes for exit
	bishbosh_connection_foreground_monitorForChildExit
}

bishbosh_connection_incrementNextPacketIdentifier()
{
	if [ $bishbosh_connection_nextPacketIdentifier -eq 65535 ]; then
		bishbosh_connection_nextPacketIdentifier=0
	else
		bishbosh_connection_nextPacketIdentifier=$((bishbosh_connection_nextPacketIdentifier+1))
	fi
}
