core_usesIn bishbosh/connection read write
core_usesIn core children

core_dependency_requires '*' mkfifo
core_dependency_oneOf '*' hexdump od
bishbosh_connection_makeClientConnection()
{
	# bishbosh_connection_id can't be local, otherwise not found in the signal handler...
	if core_variable_isUnset bishbosh_connection_nextId; then
		bishbosh_connection_id=0
		bishbosh_connection_nextId=0
	else
		bishbosh_connection_id=$bishbosh_connection_nextId
		bishbosh_connection_nextId=$((bishbosh_connection_nextId + 1))
	fi
	
	local bishbosh_connection_temporaryFolder="$bishbosh_temporaryFolderPath"/"$bishbosh_connection_id"
	mkdir -m 0700 -p "$bishbosh_connection_temporaryFolder"
	
	local bishbosh_connection_write_CONNECT_cleanSession=1
	#local bishbosh_connection_write_CONNECT_willTopic='/some/topic'
	#local bishbosh_connection_write_CONNECT_willMessage='goodbye'
	#local bishbosh_connection_write_CONNECT_willQos=0
	#local bishbosh_connection_write_CONNECT_willRetain=0
	local bishbosh_connection_write_CONNECT_keepAlive=0
	local bishbosh_connection_write_CONNECT_clientId=clientid
	#bishbosh_connection_write_CONNECT_username=user
	#bishbosh_connection_write_CONNECT_password=password
	
	local bishbosh_connection_fifoFolder="$bishbosh_connection_temporaryFolder"/fifo
	mkdir -m 0700 -p "$bishbosh_connection_fifoFolder"
	
	local bishbosh_connection_toServerFifo="$bishbosh_connection_fifoFolder"/to-server
	mkfifo -m 0600 "$bishbosh_connection_toServerFifo"
	
	local bishbosh_connection_fromServerFifo="$bishbosh_connection_fifoFolder"/from-server
	mkfifo -m 0600 "$bishbosh_connection_fromServerFifo"

	core_message INFO "Initiating connection '$bishbosh_connection_id' to server '$bishbosh_server' with temporary path '$bishbosh_connection_temporaryFolder'"
	
	# Can't be local, otherwise not found in the signal handler...
	
	# (Goes into background internally)
	bishbosh_client_plaintext_${bishbosh_client_plaintext}_start
	core_children_killOnExit $!
	
	# https://stackoverflow.com/questions/9536388/capture-pid-of-terminated-background-process-using-trap-in-bash?rq=1
	# http://mywiki.wooledge.org/ProcessManagement#I_want_to_process_a_bunch_of_files_in_parallel.2C_and_when_one_finishes.2C_I_want_to_start_the_next._And_I_want_to_make_sure_there_are_exactly_5_jobs_running_at_a_time
	# kill -0 "$clientInBackgroundPid"  will check if a process is 'signallable', ie alive
	
	bishbosh_connection_read_initialiseStrategy
	bishbosh_connection_read_initialiseControlPacketHandlers "no"
	
	#bishbosh_connection_typeB
	
	{
		bishbosh_connection_write_CONNECT
		
		local controlPacketByte
		local firstRemainingLengthByte
		
		$bishbosh_connection_read_loop bishbosh_connection_callback
	} >"$bishbosh_connection_toServerFifo"
}

bishbosh_connection_callback()
{
	${bishbosh_connection_read_byte} controlPacketByte
	${bishbosh_connection_read_byte} remainingLength
	echo $controlPacketByte $remainingLength 1>&2
	return 60
	exit 50
	bishbosh_connection_read_next
}
