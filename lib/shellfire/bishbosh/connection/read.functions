core_usesIn bishbosh/connection/read CONNACK CONNECT DISCONNECT invalid PINGREQ PINGRESP

core_dependency_requires '*' grep
bishbosh_connection_read_initialiseStrategy()
{
	# Homebrew
	if core_compatibility_whichNoOutput gstdbuf; then
		if core_compatibility_whichNoOutput god; then
			bishbosh_connection_read_loop=bishbosh_connection_read_usingGnuCoreutilsPipeHomebrew
			bishbosh_connection_read_byte=_bishbosh_connection_read_byte_whenUsingGnuCoreutilsPipe
			return 0
		fi
	fi
	if core_compatibility_whichNoOutput stdbuf; then
		if core_compatibility_whichNoOutput od; then
			if god --version 2>&1 | grep -q '^od (GNU coreutils) '; then
				bishbosh_connection_read_loop=bishbosh_connection_read_usingGnuCoreutilsPipeGnu
				bishbosh_connection_read_byte=_bishbosh_connection_read_byte_whenUsingGnuCoreutilsPipe
				return 0
			fi
		fi
	fi
	bishbosh_connection_read_loop=bishbosh_connection_read_exec
	if core_compatibility_whichNoOutput hexdump; then
		bishbosh_connection_read_byte=_bishbosh_connection_read_byte_forkHexdump
	elif core_compatibility_whichNoOutput od; then
		bishbosh_connection_read_byte=_bishbosh_connection_read_byte_forkOd
	else
		core_exitError "Can not find either hexdump or od on the path"
	fi	
}

_bishbosh_connection_read_usingGnuCoreutilsPipe()
{
	local callback="$1"
	local pathToStdbuf="$2"
	local pathToOd="$3"
	shift 3

	local bishbosh_connection_fromOdFifo="$bishbosh_connection_fifoFolder"/from-od
	mkfifo -m 0600 "$bishbosh_connection_fromOdFifo"
	
	"$pathToStdbuf" -i 0 -o 0 -e 0 "$pathToOd" -A n -t u1 -w1 -v "$bishbosh_connection_fromServerFifo" >"$bishbosh_connection_fromOdFifo" &
	core_children_killOnExit $!
	
	while true
	do
		$callback "$@"
	done <"$bishbosh_connection_fromOdFifo"
}

# BUG: Exit does not; instead, we get a hang - but not in ksh93
bishbosh_connection_read_usingGnuCoreutilsPipeHomebrew()
{
	_bishbosh_connection_read_usingGnuCoreutilsPipe "$1" gstdbuf god
}

bishbosh_connection_read_usingGnuCoreutilsPipeGnu()
{
	_bishbosh_connection_read_usingGnuCoreutilsPipe "$1" stdbuf od
}

bishbosh_connection_read_exec()
{
	local callback="$1"
	shift 1
	while true
	do
		$callback "$@"
	done
}

_bishbosh_connection_read_byte_whenUsingGnuCoreutilsPipe()
{
	IFS='' read -r $1
}

_bishbosh_connection_read_byte_forkHexdump()
{
	local byte=$(dd bs=1 count=1 if="$bishbosh_connection_fromServerFifo" 2>/dev/null | hexdump -e '"%u"')
	eval "$1=$byte"
}

_bishbosh_connection_read_byte_forkOd()
{
	# The UNQUOTED $(...) capture ensures all leading whitespace and linefeeds are removed (a problem when using od, esp on Mac OS X)
	# dd is used because
	# - both od and hexdump buffer input and output when used in a pipeline
	# - hexdump truncates the FIFO (eg if -n 1 to read one byte, but 4 bytes are in the FIFO, it discards the remaining 3 bytes)
	local byte=$(dd bs=1 count=1 if="$bishbosh_connection_fromServerFifo" 2>/dev/null | od -A n -t u1)
	eval "$1=$byte"
}

bishbosh_connection_read_initialiseControlPacketHandlers()
{
	local isServer="$1"
	if core_variable_isTrue "$isServer"; then
		bishbosh_connection_read_CONNACK()
		{
			bishbosh_connection_read_invalid
		}
		bishbosh_connection_read_SUBACK()
		{
			bishbosh_connection_read_invalid
		}
		bishbosh_connection_read_UNSUBACK()
		{
			bishbosh_connection_read_invalid
		}
		bishbosh_connection_read_PINGRESP()
		{
			bishbosh_connection_read_invalid
		}
	else
		bishbosh_connection_read_CONNECT()
		{
			bishbosh_connection_read_invalid
		}
		bishbosh_connection_read_SUBSCRIBE()
		{
			bishbosh_connection_read_invalid
		}
		bishbosh_connection_read_UNSUBSCRIBE()
		{
			bishbosh_connection_read_invalid
		}
		bishbosh_connection_read_PINGREQ()
		{
			bishbosh_connection_read_invalid
		}
		bishbosh_connection_read_DISCONNECT()
		{
			bishbosh_connection_read_invalid
		}
	fi
}

bishbosh_connection_read_next()
{
	${bishbosh_connection_read_byte} controlPacketByte
	${bishbosh_connection_read_byte} remainingLength
	
	case $controlPacketByte in
		
		16)
			# Only valid for servers
			bishbosh_connection_read_CONNECT
		;;
		
		32)
			# Only valid for clients
			bishbosh_connection_read_CONNACK
		;;
		
		48)
			bishbosh_connection_read_PUBLISH_0
		;;
		
		49)
			bishbosh_connection_read_PUBLISH_1
		;;
		
		50)
			bishbosh_connection_read_PUBLISH_2
		;;
		
		51)
			bishbosh_connection_read_PUBLISH_3
		;;
		
		52)
			bishbosh_connection_read_PUBLISH_4
		;;
		
		53)
			bishbosh_connection_read_PUBLISH_5
		;;
		
		54)
			bishbosh_connection_read_PUBLISH_6
		;;
		
		55)
			bishbosh_connection_read_PUBLISH_7
		;;
		
		56)
			bishbosh_connection_read_PUBLISH_8
		;;
		
		57)
			bishbosh_connection_read_PUBLISH_9
		;;
		
		58)
			bishbosh_connection_read_PUBLISH_10
		;;
		
		59)
			bishbosh_connection_read_PUBLISH_11
		;;
		
		60)
			bishbosh_connection_read_PUBLISH_12
		;;
		
		61)
			bishbosh_connection_read_PUBLISH_13
		;;
		
		62)
			bishbosh_connection_read_PUBLISH_14
		;;
		
		63)
			bishbosh_connection_read_PUBLISH_15
		;;
		
		64)
			bishbosh_connection_read_PUBACK
		;;
		
		80)
			bishbosh_connection_read_PUBREC
		;;
		
		98)
			bishbosh_connection_read_PUBREL
		;;
		
		112)
			bishbosh_connection_read_PUBCOMP
		;;
		
		130)
			# Only valid for servers
			bishbosh_connection_read_SUBSCRIBE
		;;
		
		144)
			# Only valid for clients
			bishbosh_connection_read_SUBACK
		;;
		
		162)
			# Only valid for servers
			bishbosh_connection_read_UNSUBSCRIBE
		;;
		
		176)
			# Only valid for clients
			bishbosh_connection_read_UNSUBACK
		;;
		
		192)
			# Only valid for servers
			bishbosh_connection_read_PINGREQ
		;;
		
		208)
			# Only valid for clients
			bishbosh_connection_read_PINGRESP
		;;
		
		224)
			# Only valid for servers
			bishbosh_connection_read_DISCONNECT
		;;
		
		*)
			bishbosh_connection_read_invalid
		;;
	esac
}

bishbosh_connection_read_protocolError()
{
	local controlPacket="$1"
	local message="$2"
	core_message WARN "Connection:$bishbosh_connection_id:read:$controlPacket:$message"
	return $core_commandLine_exitCode_PROTOCOL
}

bishbosh_connection_read_protocolErrorIfRemainingLengthNot()
{
	local controlPacket="$1"
	local expectedLength=$2
	if [ $firstRemainingLengthByte -ne $expectedLength ]; then
		bishbosh_connection_read_protocolError "$controlPacket" "Remaining length '$firstRemainingLengthByte' should be $expectedLength"
	fi
}

bishbosh_connection_read_protocolErrorIfRemainingLengthNotZero()
{
	bishbosh_connection_read_protocolErrorIfRemainingLengthNot "$1" 0
}
